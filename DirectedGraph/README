			+------------------------------------+
			|          Mikhail Rezazadeh         |
			|          October 26th, 2016        |
			+------------------------------------+

I solved Problem 1: Trains in Java

This directory tree is organizes as follows:

/Trains_Java
	|
	|-Dependencies/
		|
		|- Edge.java
		|- EdgeList.java
		|- Graph.java
		|- MinHeap.java
		|- Node.java
	

	|- README
	|- test_data
	|- Trains.java
	

1) COMPILATION
Compilation is a two-step process. First, the source code in the Dependencies
directory must be compiled with the following command: 
 
user@hostname:<pathname>/Trains_Java$ javac Dependencies/*.java

After this command, the directory tree will look like this:

/Trains_Java
        |
        |- Dependencies/
                |
                |- Edge.class
		|- Edge.java
                |- EdgeList.class
		|- EdgeList.java
                |- Graph.class
		|- Graph.java
                |- MinHeap.class
		|- MinHeap.java
                |- Node.class
		|- Node.java

	|- README
	|- test_data
	|- Trains.java

Next, the Trains class must be compiled with the following command:

user@hostname:<pathname>/Trains_Java$ javac Trains.java

2) RUNNING
Running the code requires an input file. The general usage is of the form: 

user@hostname:<pathname>/Trains_Java$ java Trains <input_file>


3) INPUT FILE FORMAT
The <input_file> must be a text file. Trains.class will assume that the input 
is of the form <nodename1><nodename2><edge_weight>{,} expressing edges and 
weights. The <nodename1> and <nodename2> is assumed to be exactly one Unicode
character. The <edge_weight> is assumed to be a number less than a 31-bit 
integer (signed int). It can be negative. There MAY or MAY NOT be commas 
between edges, including the very last edge. Valid examples include:

AB1 BC2 CA3
AB1, BC2, CA3
AB1, BC2, CA3, 
AB99999, BC7592893, CA123123123

  
In addition, Trains.class expects that the input file will not contain a given 
route more than once, and that starting and ending town will not be the same
town. 

4) OUTPUT FORMAT

The output of running the program will be ten lines of text, each corresponding
to a the result of a different function. As an example, the output of running 
the program on the test_data will be:

user@hostname:<pathname>/Trains_Java$ java Trains test_data
9
5
13
22
NO SUCH ROUTE
2
3
9
9
7
user@hostname:<pathname>/Trains_Java$ 






